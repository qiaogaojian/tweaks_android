import groovy.io.FileType
import org.gradle.internal.logging.text.StyledTextOutput;
import org.gradle.internal.logging.text.StyledTextOutputFactory;
import static org.gradle.internal.logging.text.StyledTextOutput.Style;

apply plugin: 'com.android.application'
apply from: "./flavour.gradle"

def keyConfigFile = rootProject.file("app/etatech.properties")
def keyConfig = new Properties()
keyConfig.load(new FileInputStream(keyConfigFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.etatech.test"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        //可以根据不同需要配置不同的信息，在需要的地方引用即可
        debug {
            // 配置的这几行都是生成keystore时需要的
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias keyConfig['keystoreAlias']
            keyPassword keyConfig['keyPassword']
            storeFile file(keyConfig['keystoreFile'])
            storePassword keyConfig['storePassword']
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            keyAlias keyConfig['keystoreAlias']
            keyPassword keyConfig['keyPassword']
            storeFile file(keyConfig['keystoreFile'])
            storePassword keyConfig['storePassword']
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"//在BuildConfig文件中生成LOG_DEBUG字段
            minifyEnabled false     //是否运行混淆文件

            zipAlignEnabled false   //是否使用Zipalign优化
            //Android SDK中含一个“zipalign”的工具，它能够对打包的应用程序进行优化
            //在你的应用程序上运行zipalign，使得在运行时Android与应用程序间的交互更加有效率

            debuggable true         //能否进行debug

            shrinkResources false   // 移除无用的resource文件

            signingConfig signingConfigs.debug//签名配置
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true      // 混淆
            zipAlignEnabled true    // Zipalign优化
            shrinkResources true    // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dexOptions {
        maxProcessCount 8       //设置可以同时启动的DEX进程的最大数量
        javaMaxHeapSize "2g"    //设置dex操作的最大内存分配池大小
        preDexLibraries true    //使Gradle能够预先解决库依赖关系
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    flavorDimensions "default"
    productFlavors {

        google { dimension "default" }
        others { dimension "default" }

        /** 在AndroidManifest.xml中加入
         <meta-data android:name="Channel"
         android:value="${CHANNEL_NAME}" />
         **/
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_NAME: name]
        }

    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
            java.srcDirs = ['src/main/java']
            assets.srcDirs = ['src/main/assets']
        }
        google {
            res.srcDirs = ['src/googlePlay/res']
            java.srcDirs = ['src/googlePlay/java']
            assets.srcDirs = ['src/googlePlay/assets']
        }
        others {
            res.srcDirs = ['src/normal/res']
            java.srcDirs = ['src/normal/java']
            assets.srcDirs = ['src/normal/assets']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // noinspection GradleCompatible
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.android.support:recyclerview-v7:28.0.0'

    // Utils
    implementation 'com.blankj:utilcode:1.26.0'
    // 自动混淆
    implementation "com.blankj:free-proguard:1.0.2"

    // RxJava
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.1.6'

    // RxLifecycle
    implementation 'com.trello:rxlifecycle:1.0'
    implementation 'com.trello:rxlifecycle-components:1.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"

    // RxBinding
    implementation 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.1.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.1.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-design:2.1.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.1.0'

    // 网络连接
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.2'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'

    // 权限管理
    implementation 'gun0912.ted:tedpermission-rx1:2.2.3'

    // 内存泄漏检测
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.1'

    // 图片加载
    implementation 'com.github.bumptech.glide:glide:4.7.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    implementation "com.sdbean.glide:webpdecoder:1.0.0"

    implementation 'com.facebook.fresco:fresco:1.13.0'
    implementation 'com.facebook.fresco:animated-webp:1.13.0'
    implementation 'com.facebook.fresco:webpsupport:1.13.0'
    implementation 'com.facebook.fresco:animated-gif:1.13.0'

    implementation 'com.leo618:zip:0.0.1'

    // 开屏广告
    implementation project(':splashad')
//    implementation 'com.sdbean.splashad:splashad:2.1.0'
    // 虚拟机检测
    implementation project(':antiemulator')
//    implementation 'com.sdbean.antiemulator:antiemulator:1.0.3'
}

//添加到文件最后
//自动打包扩展文件obb
task zipObb {
    doLast {
        //获取debug还是release模式输出到不同地址
        String outputFilePath
        if (gradle.startParameter.taskNames.toString().contains("Debug")) {
            outputFilePath = "./app/build/outputs/apk/google/debug/main." + android.defaultConfig.versionCode + '.' + android.defaultConfig.applicationId + ".obb"
        } else {
            outputFilePath = "./app/google/release/main." + android.defaultConfig.versionCode + '.' + android.defaultConfig.applicationId + ".obb"
        }

        def list = []
        //此目录添加需要打包obb的所有资源文件
        def dir = new File('./app/src/normal/res/')
        dir.eachFileRecurse(FileType.FILES) { file ->
            list << file
        }

        zipObb(list, outputFilePath)
    }
}

task checkBranch {
    doLast {
        gitBranch()
        switchDev()
        gitBranch()
    }
}

task curBranch {
    doLast {
        def branch = ""
        def proc = "git rev-parse --abbrev-ref HEAD".execute()
        proc.in.eachLine { line -> branch = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
        def out = services.get(StyledTextOutputFactory).create("blah")
        if (branch != "master") {
            out.withStyle(Style.Failure).println('当前分支不是提交分支')
        } else {
            out.withStyle(Style.Failure).println('当前分支是提交分支')
        }
    }
}

task color {
    doLast {
        def out = services.get(StyledTextOutputFactory).create("blah")
        StyledTextOutput.Style.values().each {
            out.style(it).println("This line has the style $it")
        }
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    println(branch)
}

def switchDev() {
    def proc = "git checkout master".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
}

build.dependsOn installGitHooks
